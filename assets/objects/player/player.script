go.property("With_Player", 1)
go.property("StartRotAngle", 180)
go.property("shooted", false)
go.property("Points", 0)

function init(self)
	msg.post("#", "acquire_input_focus")
	msg.post("@render:", "use_camera_projection")
	msg.post("/cam_hdl#camera", "acquire_camera_focus")

	self.StartPos = go.get_position()
	self.StartRot = go.get_rotation()
	self.StartBulletSpeed = 1000
	self.StartMoveingSpeed = 300
	self.StartRotationSpeed = 40
	self.StartMaxArmor = 2
	self.StartMaxBullets = 3
	self.StartMaxBulletBounce = 1
	self.StartBulletLifeTime = 3

	self.MoveingSpeed    = self.StartMoveingSpeed
	self.RotationSpeed   = self.StartRotationSpeed
	self.BulletSpeed     = self.StartBulletSpeed
	self.MaxBullets      = self.StartMaxBullets
	self.MaxBulletBounce = self.StartMaxBulletBounce
	self.BulletLifeTime  = self.StartBulletLifeTime
	self.MaxArmor        = self.StartMaxArmor
	

	self.bullets2shoot = self.MaxBullets
	self.Armor = self.MaxArmor
	
	self.ShootCooldown = 1
	self.ShootTime = 0
	
	self.rot = math.rad(self.StartRotAngle)
	self.pos = vmath.vector3()
	
	self.bullets = {}
	
	math.randomseed(socket.gettime()) 
end

function fixed_update(self, dt)
	local rot = go.get(".", "euler.z") + self.rot * dt
	go.set(".", "euler.z", rot)
	self.rot = 0

	go.set_position(go.get_position() + self.pos * dt)
	self.pos = vmath.vector3()

	self.ShootTime = self.ShootTime + dt

	if self.shooted then
		EndRound(self)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		if message.other_group == hash("wall") then
			go.set_position(go.get_position() + message.normal * message.distance)
		end
		if message.other_group == hash("powerup") then
			msg.post(message.other_id, "response")
		end
	end
	if message_id == hash("restart") then
		restart(self)
	end

	CheckPowerUps(self, message_id, message.value)
end

function on_input(self, action_id, action)
	if action_id == hash("forward") and self.With_Player == 1 or action_id == hash("forward2") and self.With_Player == 2 then
		self.pos = self.pos + vmath.rotate(go.get_rotation(), vmath.vector3(0,self.MoveingSpeed,0))
	elseif action_id == hash("backward") and self.With_Player == 1 or action_id == hash("backward2") and self.With_Player == 2 then
		self.pos = self.pos - vmath.rotate(go.get_rotation(), vmath.vector3(0,self.MoveingSpeed,0))
	elseif action_id == hash("turnleft") and self.With_Player == 1 or action_id == hash("turnleft2") and self.With_Player == 2 then
		self.rot = self.rot + self.RotationSpeed
	elseif action_id == hash("turnright") and self.With_Player == 1 or action_id == hash("turnright2") and self.With_Player == 2 then
		self.rot = self.rot - self.RotationSpeed
	elseif action_id == hash("shoot") and self.With_Player == 1 or action_id == hash("shoot2") and self.With_Player == 2 then
		if self.ShootTime >= self.ShootCooldown then
			SpawnBullet(self)
			self.ShootTime = 0
		end
	end
end

function SpawnBullet(self)
	local pos = go.get_position()
	local path = ""

	if self.With_Player == 1 then	path = "Player#bulletfactory"
	else path = "Player2#bulletfactory"	end

	table.insert(self.bullets, factory.create(path, pos, nil, {direction = vmath.rotate(go.get_rotation(),vmath.vector3(0,1,0)), witch_player = self.With_Player, speed = self.BulletSpeed}))
end

function EndRound(self)
	self.Points = self.Points + 1

	if self.With_Player == 1 then	msg.post("/gui#maingame", "set_points_player2", {player2 = self.Points})	end
	if self.With_Player == 2 then	msg.post("/gui#maingame", "set_points_player1", {player1 = self.Points})	end

	msg.post("/Player2", "restart")
	msg.post("/Player", "restart")
	msg.post("/MapGen", "restart")
	self.shooted = false
end

function restart(self)
	self.MoveingSpeed    = self.StartMoveingSpeed
	self.RotationSpeed   = self.StartRotationSpeed
	self.BulletSpeed     = self.StartBulletSpeed
	self.MaxBullets      = self.StartMaxBullets
	self.MaxBulletBounce = self.StartMaxBulletBounce
	self.BulletLifeTime  = self.StartBulletLifeTime
	self.MaxArmor        = self.StartMaxArmor

	go.set_position(self.StartPos)
	go.set_rotation(self.StartRot)
	for _, child_id in ipairs(self.bullets) do	go.delete(child_id)	end
	self.bullets = {}
end

function TakeHit(self)
	self.Armor = self.Armor - 1
	if self.Armor <= 0 then	EndRound(self)	end
end

function CheckPowerUps(self, message_id, value)
	if message_id == hash("bulletspeed")      then	self.BulletSpeed = self.BulletSpeed + value
	elseif message_id == hash("tankspeed")    then	self.MoveingSpeed = self.MoveingSpeed + value
	elseif message_id == hash("tanksrotpeed") then	self.RotationSpeed = self.RotationSpeed + value 
	end
end