local ROTATION_SPEED = 50
local MOVING_SPEED = 4

function init(self)
	msg.post("#", "acquire_input_focus")
	msg.post("@render:", "use_camera_projection")
	msg.post("/cam_hdl#camera", "acquire_camera_focus")

	go.property("With_Player", 1)
	go.property("StartRot", 180)
	
	self.vel = vmath.vector3()
	self.rot = math.rad(self.StartRot)
	self.pos = go.get_position()
	math.randomseed(socket.gettime()) 

end

function fixed_update(self, dt)
	local rot = go.get(".", "euler.z") + self.rot * dt
	go.set(".", "euler.z", rot)
	self.rot = 0
	
	go.set_position(self.pos)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		if message.other_group == hash("border") then
			self.pos = self.pos + message.normal * message.distance
		end 
	end
end

function on_input(self, action_id, action)
	if action_id == hash("forward") and self.With_Player == 1 or action_id == hash("forward2") and self.With_Player == 2 then
		self.pos = self.pos + vmath.rotate(go.get_rotation(), vmath.vector3(0,MOVING_SPEED,0))
	end
	if action_id == hash("backward") and self.With_Player == 1 or action_id == hash("backward2") and self.With_Player == 2 then
		self.pos = self.pos - vmath.rotate(go.get_rotation(), vmath.vector3(0,MOVING_SPEED,0))
	end
	if action_id == hash("turnleft") and self.With_Player == 1 or action_id == hash("turnleft2") and self.With_Player == 2 then
		self.rot = self.rot + ROTATION_SPEED
	end
	if action_id == hash("turnright") and self.With_Player == 1 or action_id == hash("turnright2") and self.With_Player == 2 then
		self.rot = self.rot - ROTATION_SPEED
	end
end