go.property("With_Player", 1)
go.property("StartRot", 180)
go.property("shooted", false)
go.property("Points", 0)

function init(self)
	msg.post("#", "acquire_input_focus")
	msg.post("@render:", "use_camera_projection")
	msg.post("/cam_hdl#camera", "acquire_camera_focus")
	
	self.rot = math.rad(self.StartRot)
	self.pos = vmath.vector3()
	self.MovingSpeed = 600
	self.RotationSpeed = 80
	self.ShootCooldown = 1
	self.ShootTime = 0
	self.StartPos = go.get_position()
	self.StartRot = go.get_rotation()
	
	math.randomseed(socket.gettime()) 
end

function fixed_update(self, dt)
	local rot = go.get(".", "euler.z") + self.rot * dt
	go.set(".", "euler.z", rot)
	self.rot = 0

	go.set_position(go.get_position() + self.pos * dt)
	self.pos = vmath.vector3()

	self.ShootTime = self.ShootTime + dt

	if self.shooted then
		EndRound(self)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		if message.other_group == hash("wall") then
			go.set_position(go.get_position() + message.normal * message.distance)
		end 
	end
	if message_id == hash("restart_pos") then
		go.set_position(self.StartPos)
		go.set_rotation(self.StartRot)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("forward") and self.With_Player == 1 or action_id == hash("forward2") and self.With_Player == 2 then
		self.pos = self.pos + vmath.rotate(go.get_rotation(), vmath.vector3(0,self.MovingSpeed,0))
	end
	if action_id == hash("backward") and self.With_Player == 1 or action_id == hash("backward2") and self.With_Player == 2 then
		self.pos = self.pos - vmath.rotate(go.get_rotation(), vmath.vector3(0,self.MovingSpeed,0))
	end
	if action_id == hash("turnleft") and self.With_Player == 1 or action_id == hash("turnleft2") and self.With_Player == 2 then
		self.rot = self.rot + self.RotationSpeed
	end
	if action_id == hash("turnright") and self.With_Player == 1 or action_id == hash("turnright2") and self.With_Player == 2 then
		self.rot = self.rot - self.RotationSpeed
	end
	if action_id == hash("shoot") and self.With_Player == 1 or action_id == hash("shoot2") and self.With_Player == 2 then
		if self.ShootTime >= self.ShootCooldown then
			SpawnBullet(self)
			self.ShootTime = 0
		end
	end
end

function SpawnBullet(self)
	local pos = go.get_position()

	local path = ""

	if self.With_Player == 1 then
		path = "Player#bulletfactory"
	else 
		path = "Player2#bulletfactory"
	end

	local bullet_id = factory.create(path, pos, nil, {direction = vmath.rotate(go.get_rotation(),vmath.vector3(0,1,0)), witch_player = self.With_Player})
end

function EndRound(self)
	self.Points = self.Points + 1

	if self.With_Player == 1 then
		msg.post("/gui#maingame", "set_points_player2", {player2 = self.Points})
	end
	if self.With_Player == 2 then		
		msg.post("/gui#maingame", "set_points_player1", {player1 = self.Points})
	end

	msg.post("/Player2", "restart_pos")
	msg.post("/Player", "restart_pos")
	msg.post("/MapGen", "restart")
	self.shooted = false
end