go.property("lifetime", 6)
go.property("speed", 2000)
go.property("direction", vmath.vector3(0, 1, 0))
go.property("bounce", 2)
go.property("lifetime", 6)

function init(self)
	msg.post("#collisionobject", "enable")

	go.set(".", "position.z", -1)

	go.set_scale(vmath.vector3(0.25,0.25,0.25))
	go.set_position(go.get_position() + self.direction * 250)
	go.set_rotation(vmath.quat_rotation_z(math.atan2(self.direction.y, self.direction.x) - 1.6))
	
	self.timeoflife = 0
	self.cbounce = 0
end

function fixed_update(self, dt)
	go.set_position(go.get_position() + self.direction * self.speed * dt)

	self.timeoflife = self.timeoflife + dt
	if self.timeoflife >= self.lifetime then go.delete() end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("collision_response") then
		if message.other_id == hash("/Player") then
			msg.post("/Player", "TakeHit")
			go.delete()
		end
		
		if message.other_id == hash("/Player2")then
			msg.post("/Player2", "TakeHit")
			go.delete()
		end
		
		if message.other_group == hash("bullet") then
			go.delete(message.other_id)
			go.delete()
		end
	end
	
	if message_id == hash("contact_point_response") then
		self.direction = self.direction - 2 * vmath.dot(self.direction, message.normal) *  message.normal
		self.direction = vmath.normalize(self.direction)
		go.set_rotation(vmath.quat_rotation_z(math.atan2(self.direction.y, self.direction.x) - 1.6))
		self.cbounce = self.cbounce + 1
		if self.cbounce > self.bounce then go.delete() end
	end
end